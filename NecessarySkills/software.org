* chrome 
平常用全屏  使用 vim 来操纵网页

Alt+F4 或 Ctrl+Shift+W：关闭当前窗口。
Ctrl+W 或 Ctrl+F4：关闭当前标签页或弹出式窗口。

* matlab

** 讲 matlab 的默认编码换位 utf-8 编码


在命令窗口输入命令：

feature('locale')
可以看到多是用 GBK 进行编码。

如果想以 utf-8 编码，而不是 GBK 编码的话，请找到 MATLAB 的安装路径，我的是 D:\MATLAB\R2016b。找到 bin 目录下的 locale 数据库文件 lcdata.xml，即完整路径：D:\MATLAB\R2016b\bin\lcdata.xml

打开并删除 lcdata.xml 中的：

<encoding name=”GBK”>  
  < encoding_alias name=”936”>  
</encoding>
并将：

<encoding name=”UTF-8”>  
  <encoding_alias name=”utf8”/> 
</encoding>  
改为：

<encoding name=”UTF-8”>  
  <encoding_alias name=”utf8”/>  
  <encoding_alias name=”GBK”/>  
</encoding>  
重启 matlab 之后，即以 utf-8 编码

* python

** 改为豆瓣源
所以我们可以在 Linux 编辑~/.pip/pip.conf 或者在 Windows 下编辑%HOME%\pip\pip.ini，内容如下：
[global] 
index-url = http://pypi.douban.com/simple 
这样就是将默认的 pypi 源改成豆瓣源了，而不用每次 pip install 的时候通过-i 参数指定。

* vim 

** vim 快捷键
一：光标命令    
    左 h 上 j 下 k 右 l
    ：goto n 表示跳转到文本的第 n个字符
    ：n      表示跳到第 n行
    nG  n 为行数，该命令立即使光标跳到指定行；n为空，光标跳到文件最后一行。
    Ctrl+G——光标所在位置的行数和列数报告
    w 或b——使光标向前或向后跳过一个单词
    vim +n filename 表示进入文件后直接定位到某行
二：编辑命令
      v 命令：表示编辑模式下可以上下选中几行进行编辑
   (1)剪切:
      dd 表示剪切一行
      d$ 剪切当前行光标所在的位置到行尾
      d^ 剪切当前行光标所在的位置到行首
      ndd 表示从当前行+下两行被剪切了
      ：1,10 m 20 剪切 1到 10 行到 20 行
   （2）复制：
       yy/Y 表示复制游标所在行的整行
       2yy 或y2y 复制两行
       y$/y0 复制到行尾，不含游标所在处字元
       y^    复制至行首，含游标所在处字元
       yG    复制至档尾
   （3）粘贴：
       p（小） 当前行的后面
       P（大） 当前行的前面

** vim set 中的 命令大全
进入 vim 的命令：      

    vim filename :打开或新建文件，并将光标置于第一行首  

    vim +n filename ：打开文件，并将光标置于第 n行首  

    vim + filename ：打开文件，并将光标置于最后一行首  

    vim +/pattern filename：打开文件，并将光标置于第一个与 pattern 匹配的串处  

    vim -r filename ：在上次正用 vim 编辑时发生系统崩溃，恢复 filename  

    vim filename….filename ：打开多个文件，依次编辑  

Vim 配置：  

    all：列出所有选项设置情况  

    term：设置终端类型  

    ignorance：在搜索中忽略大小写  

    list：显示制表位(Ctrl+I)和行尾标志（$)  

    number：显示行号  

    report：显示由面向行的命令修改过的数目  

    terse：显示简短的警告信息  

    warn：在转到别的文件时若没保存当前文件则显示 NO write 信息  

    nomagic：允许在搜索模式中，使用前面不带“\”的特殊字符  

    nowrapscan：禁止 vi 在搜索到达文件两端时，又从另一端开始  

    mesg：允许 vi 显示其他用户用 write 写到自己终端上的信息  

    :set number / set nonumber :显示/不显示行号  

    :set ruler /set noruler:显示/不显示标尺  

    :set hlsearch 高亮显示查找到的单词  

    :set nohlsearch 关闭高亮显示  

    :syntax on        #语法高亮  

    :set nu        #显示行号  

    :set tabstop=4    #设置 tab 大小  

    :set softtabstop=4  

    :set autoindent    #自动缩进  

    :set cindent    #C 语言格式里面的自动缩进  

移动光标：  

    上:k nk:向上移动 n行  

    下:j nj:向下移动 n行  

    左:h nh:向左移动 n列  

    右:l nl:向右移动 n列  

    space：光标右移一个字符  

    Backspace：光标左移一个字符  

    Enter ：光标下移一行  

    w 或W ：光标右移一个字至字首  

    b 或B ：光标左移一个字至字首  

    e 或E ：光标右移一个字至字尾  

    ) ：光标移至句尾  

    ( ：光标移至句首  

    }：光标移至段落开头  

    {：光标移至段落结尾  

    n$：光标移至第 n行尾  

    H ：光标移至屏幕顶行  

    M ：光标移至屏幕中间行  

    L ：光标移至屏幕最后行  

    0：（注意是数字零）光标移至当前行首  

    ^：移动光标到行首第一个非空字符上去  

    $：光标移至当前行尾  

    gg 可以移到第一行  

    G 移到最后一行  

    f<a>:移动光标到当前行的字符 a上  

    F:相反  

    %：移动到与制匹配的括号上去（），{}，[]，<>等。  

    nG:移动到第 n行上  

    G:到最后一行  

屏幕翻滚类命令：  

    Ctrl+u：向文件首翻半屏  

    Ctrl+d：向文件尾翻半屏  

    Ctrl+f：向文件尾翻一屏  

    Ctrl＋b：向文件首翻一屏  

    nz：将第 n行滚至屏幕顶部，不指定 n时将当前行滚至屏幕顶部  

插入文本类命令：

    i ：在光标前  

    I ：在当前行首  

    a：光标后  

    A：在当前行尾  

    o：在当前行之下新开一行  

    O：在当前行之上新开一行  

    r：替换当前字符  

    R：替换当前字符及其后的字符，直至按 ESC 键  

    s：从当前光标位置处开始，以输入的文本替代指定数目的字符  

    S：删除指定数目的行，并以所输入文本代替之  

    ncw 或nCW：修改指定数目的字  

    nCC：修改指定数目的行  

删除命令：

    x 或X：删除一个字符，x删除光标后的，而 X删除光标前的  

    dw：删除一个单词  

    dnw:删除 n个单词  

    dne:也可，只是删除到单词尾  

do：删至行首  

    d$：删至行尾  

    dd：删除一行  

    ndd：删除当前行及其后 n-1 行  

    dnl:向右删除 n个字母  

    dnh:向左删除 n个字母  

    dnj:向下删除 n行  

    dnk:向上删除 n行  

    cnw[word]:将 n个 word 改变为 word  

    C$:改变到行尾  

    cc:改变整行  

    shift+j：删除行尾的换行符，下一行接上来了.  

复制粘贴：  

    p：粘贴用 x或 d删除的文本  

    ynw：复制 n个单词  

    yy：复制一行  

    ynl:复制 n个字符  

    y$:复制当前光标至行尾处  

    nyy:拷贝 n行  

撤销：  

    u: 撤销前一次的操作  

    shif+u(U):撤销对该行的所有操作。  

搜索及替换命令 :  

    /pattern：从光标开始处向文件尾搜索 pattern  

    ?pattern：从光标开始处向文件首搜索 pattern  

    n：在同一方向重复上一次搜索命令  

    N：在反方向上重复上一次搜索命令  

    cw【newword】:替换为 newword  

    n: 继续查找  

    .：执行替换  

    :s/p1/p2/g：将当前行中所有 p1 均用 p2 替代,g 表示执行用 c表示需要确认  

    :n1,n2 s/p1/p2/g：将第 n1 至n2 行中所有 p1 均用 p2 替代  

    :g/p1/s//p2/g：将文件中所有 p1 均用 p2 替换  

    :1,$ s/string1/string2/g:在全文中将 string1 替换为 string2  

书签：  

    m[a-z]:在文中做标记，标记号可为 a-z 的26 个字母  

    `a：移动到标记 a处  

visual 模式：  

    v:进入 visual 模式  

    V:进入行的 visual 模式  

    ctrl+v:进如块操作模式用 o和 O改变选择的边的大小  

    在所有行插入相同的内容如 include<，操作方法如下：  

    将光标移到开始插入的位置，按 CTRL+V 进入 VISUAL 模式，选择好模块后按 I（shift+i)，后插入要插入的文本，按[ESC]完成  

行方式命令：  

    ：n1,n2 co n3：将 n1 行到 n2 行之间的内容拷贝到第 n3 行下  

    ：n1,n2 m n3：将 n1 行到 n2 行之间的内容移至到第 n3 行下  

    ：n1,n2 d ：将 n1 行到 n2 行之间的内容删除  

    ：n1,n2 w!command：将文件中 n1 行至 n2 行的内容作为 command 的输入并执行之  

            若不指定 n1，n2，则表示将整个文件内容作为 command 的输入  

宏：  

    q[a-z]：开始记录但前开始的操作为宏，名称可为【a-z】，然后用 q终止录制宏  

    reg：显示当前定义的所有的宏，用@[a-z]来在当前光标处执行宏[a-z]  

窗口操作：  

    :split:分割一个窗口  

    :split file.c ：为另一个文件 file.c 分隔窗口  

    :nsplit file.c： 为另一个文件 file.c 分隔窗口，并指定其行数  

    ctrl＋w 在窗口中切换  

    :close：关闭当前窗口  

文件及其他：  

    ：q：退出 vi  

    ：q!：不保存文件并退出 vi  

    ：e filename：打开文件 filename 进行编辑  

    ：e! :放弃修改文件内容，重新载入该文件编辑  

    ：w ：保存当前文件  

    ：wq ：存盘退出  

    ：ZZ：保存当前文档并退出 VIM  

    ：!command：执行 shell 命令 command  

    ：r!command：将命令 command 的输出结果放到当前行  

    :n1,n2 write temp.c 将本文件中的 n1,到 n2 行写入 temp.c 这个文件中去  

    :read file.c 将文件 file.c 的内容插入到当前光标所在的下面  

    :0read file.c 将文件 file.c 的内容插入到当前文件的开始处(第 0行）  

    :nread file.c 将文件 file.c 的内容插入到当前文件的第 n行后面  

    :read !cmd :将外部命令 cmd 的输出插如到当前光标所在的下面  

帮助：  

    :help ：查看帮助文档，在这之中，按 CTRL+] 进入超连接，按 CTRL＋O 返回。  

    :help subject :看某一主题的帮助，ZZ 退出帮助  

其它常用：  

    :newtab   新建标签  

    :gt   转至下一个标签  

    :gT   转到上一个标签  

    :au GUIEnter * simalt ~x   启动时最大化
** vim 中文乱码修改 
在 vimrc 中
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
** vimrc 设置 
在 vimrc 中
set nocompatible " 关闭 vi 兼容模式
syntax on " 自动语法高亮
colorscheme molokai " 设定配色方案
set number " 显示行号
set cursorline " 突出显示当前行
set ruler " 打开状态栏标尺
set shiftwidth=4 " 设定 << 和 >> 命令移动时的宽度为 4
set softtabstop=4 " 使得按退格键时可以一次删掉 4 个空格
set tabstop=4 " 设定 tab 长度为 4
set nobackup " 覆盖文件时不备份
set autochdir " 自动切换当前目录为当前文件所在的目录
filetype plugin indent on " 开启插件
set backupcopy=yes " 设置备份时的行为为覆盖
set ignorecase smartcase " 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感
set nowrapscan " 禁止在搜索到文件两端时重新搜索
set incsearch " 输入搜索内容时就显示搜索结果
set hlsearch " 搜索时高亮显示被找到的文本
set noerrorbells " 关闭错误信息响铃
set novisualbell " 关闭使用可视响铃代替呼叫
set t_vb= " 置空错误铃声的终端代码
" set showmatch " 插入括号时，短暂地跳转到匹配的对应括号
" set matchtime=2 " 短暂跳转到匹配括号的时间
set magic " 设置魔术
set hidden " 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存
set guioptions-=T " 隐藏工具栏
set guioptions-=m " 隐藏菜单栏
set smartindent " 开启新行时使用智能自动缩进
set backspace=indent,eol,start
" 不设定在插入状态无法用退格键和 Delete 键删除回车符
set cmdheight=1 " 设定命令行的行数为 1
set laststatus=2 " 显示状态栏 (默认值为 1, 无法显示状态栏)
set statusline=\ %<%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&fileformat}\ %{&encoding}\ %c:%l/%L%)\ 
" 设置在状态行显示的信息
set foldenable " 开始折叠
set foldmethod=syntax " 设置语法折叠
set foldcolumn=0 " 设置折叠区域的宽度
setlocal foldlevel=1 " 设置折叠层数为
" set foldclose=all " 设置为自动关闭折叠 
" nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
" 用空格键来开关折叠


" return OS type, eg: windows, or linux, mac, et.st..
function! MySys()
if has("win16") || has("win32") || has("win64") || has("win95")
return "windows"
elseif has("unix")
return "linux"
endif
endfunction

" 用户目录变量$VIMFILES
if MySys() == "windows"
let $VIMFILES = $VIM.'/vimfiles'
elseif MySys() == "linux"
let $VIMFILES = $HOME.'/.vim'
endif

" 设定 doc 文档目录
let helptags=$VIMFILES.'/doc'

" 设置字体 以及中文支持
if has("win32")
set guifont=Inconsolata:h12:cANSI
endif

" 配置多语言环境
if has("multi_byte")
" UTF-8 编码
set encoding=utf-8
set termencoding=utf-8
set formatoptions+=mM
set fencs=utf-8,gbk

if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
set ambiwidth=double
endif

if has("win32")
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
language messages zh_CN.utf-8
endif
else
echoerr "Sorry, this version of (g)vim was not compiled with +multi_byte"
endif

" Buffers 操作快捷方式!
nnoremap <C-RETURN> :bnext<CR>
nnoremap <C-S-RETURN> :bprevious<CR>

" Tab 操作快捷方式!
nnoremap <C-TAB> :tabnext<CR>
nnoremap <C-S-TAB> :tabprev<CR>

"关于 tab 的快捷键
" map tn :tabnext<cr>
" map tp :tabprevious<cr>
" map td :tabnew .<cr>
" map te :tabedit
" map tc :tabclose<cr>

"窗口分割时,进行切换的按键热键需要连接两次,比如从下方窗口移动
"光标到上方窗口,需要<c-w><c-w>k,非常麻烦,现在重映射为<c-k>,切换的
"时候会变得非常方便.
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"一些不错的映射转换语法（如果在一个文件中混合了不同语言时有用）
nnoremap <leader>1 :set filetype=xhtml<CR>
nnoremap <leader>2 :set filetype=css<CR>
nnoremap <leader>3 :set filetype=javascript<CR>
nnoremap <leader>4 :set filetype=php<CR>

" set fileformats=unix,dos,mac
" nmap <leader>fd :se fileformat=dos<CR>
" nmap <leader>fu :se fileformat=unix<CR>

" use Ctrl+[l|n|p|cc] to list|next|previous|jump to count the result
" map <C-x>l <ESC>:cl<CR>
" map <C-x>n <ESC>:cn<CR>
" map <C-x>p <ESC>:cp<CR>
" map <C-x>c <ESC>:cc<CR>


" 让 Tohtml 产生有 CSS 语法的 html
" syntax/2html.vim，可以用:runtime! syntax/2html.vim
let html_use_css=1

" Python 文件的一般设置，比如不要 tab 等
autocmd FileType python set tabstop=4 shiftwidth=4 expandtab
autocmd FileType python map <F12> :!python %<CR>

" 选中状态下 Ctrl+c 复制
vmap <C-c> "+y

" 打开 javascript 折叠
let b:javascript_fold=1
" 打开 javascript 对dom、html 和css 的支持
let javascript_enable_domhtmlcss=1
" 设置字典 ~/.vim/dict/文件的路径
autocmd filetype javascript set dictionary=$VIMFILES/dict/javascript.dict
autocmd filetype css set dictionary=$VIMFILES/dict/css.dict
autocmd filetype php set dictionary=$VIMFILES/dict/php.dict

"-----------------------------------------------------------------
" plugin - bufexplorer.vim Buffers 切换
" \be 全屏方式查看全部打开的文件列表
" \bv 左右方式查看 \bs 上下方式查看
"-----------------------------------------------------------------


"-----------------------------------------------------------------
" plugin - taglist.vim 查看函数列表，需要 ctags 程序
" F4 打开隐藏 taglist 窗口
"-----------------------------------------------------------------
if MySys() == "windows" " 设定 windows 系统中 ctags 程序的位置
let Tlist_Ctags_Cmd = '"'.$VIMRUNTIME.'/ctags.exe"'
elseif MySys() == "linux" " 设定 windows 系统中 ctags 程序的位置
let Tlist_Ctags_Cmd = '/usr/bin/ctags'
endif
nnoremap <silent><F4> :TlistToggle<CR>
let Tlist_Show_One_File = 1 " 不同时显示多个文件的 tag，只显示当前文件的
let Tlist_Exit_OnlyWindow = 1 " 如果 taglist 窗口是最后一个窗口，则退出 vim
let Tlist_Use_Right_Window = 1 " 在右侧窗口中显示 taglist 窗口
let Tlist_File_Fold_Auto_Close=1 " 自动折叠当前非编辑文件的方法列表
let Tlist_Auto_Open = 0
let Tlist_Auto_Update = 1
let Tlist_Hightlight_Tag_On_BufEnter = 1
let Tlist_Enable_Fold_Column = 0
let Tlist_Process_File_Always = 1
let Tlist_Display_Prototype = 0
let Tlist_Compact_Format = 1
"-----------------------------------------------------------------
" plugin - mark.vim 给各种 tags 标记不同的颜色，便于观看调式的插件。
" \m mark or unmark the word under (or before) the cursor
" \r manually input a regular expression. 用于搜索.
" \n clear this mark (i.e. the mark under the cursor), or clear all highlighted marks .
" \* 当前 MarkWord 的下一个 \# 当前 MarkWord 的上一个
" \/ 所有 MarkWords 的下一个 \? 所有 MarkWords 的上一个
"-----------------------------------------------------------------
"-----------------------------------------------------------------
" plugin - NERD_tree.vim 以树状方式浏览系统中的文件和目录
" :ERDtree 打开 NERD_tree :NERDtreeClose 关闭 NERD_tree
" o 打开关闭文件或者目录 t 在标签页中打开
" T 在后台标签页中打开 ! 执行此文件
" p 到上层目录 P 到根目录
" K 到第一个节点 J 到最后一个节点
" u 打开上层目录 m 显示文件系统菜单（添加、删除、移动操作）
" r 递归刷新当前目录 R 递归刷新当前根目录
"-----------------------------------------------------------------
" F3 NERDTree 切换
map <F3> :NERDTreeToggle<CR>
imap <F3> <ESC>:NERDTreeToggle<CR>
"-----------------------------------------------------------------
" plugin - NERD_commenter.vim 注释代码用的，
" [count],cc 光标以下 count 行逐行添加注释(7,cc)
" [count],cu 光标以下 count 行逐行取消注释(7,cu)
" [count],cm 光标以下 count 行尝试添加块注释(7,cm)
" ,cA 在行尾插入 /* */,并且进入插入模式。 这个命令方便写注释。
" 注：count 参数可选，无则默认为选中行或当前行
"-----------------------------------------------------------------
let NERDSpaceDelims=1 " 让注释符与语句之间留一个空格
let NERDCompactSexyComs=1 " 多行注释时样子更好看
"-----------------------------------------------------------------
" plugin - DoxygenToolkit.vim 由注释生成文档，并且能够快速生成函数标准注释
"-----------------------------------------------------------------
let g:DoxygenToolkit_authorName="Asins - asinsimple AT gmail DOT com"
let g:DoxygenToolkit_briefTag_funcName="yes"
map <leader>da :DoxAuthor<CR>
map <leader>df :Dox<CR>
map <leader>db :DoxBlock<CR>
map <leader>dc a /* */<LEFT><LEFT><LEFT>
"-----------------------------------------------------------------
" plugin – ZenCoding.vim 很酷的插件，HTML 代码生成
" 插件最新版：http://github.com/mattn/zencoding-vim
" 常用命令可看：http://nootn.com/blog/Tool/23/
"-----------------------------------------------------------------
"-----------------------------------------------------------------
" plugin – checksyntax.vim JavaScript 常见语法错误检查
" 默认快捷方式为 F5
"-----------------------------------------------------------------
let g:checksyntax_auto = 0 " 不自动检查
"-----------------------------------------------------------------
" plugin - NeoComplCache.vim 自动补全插件
"-----------------------------------------------------------------
let g:AutoComplPop_NotEnableAtStartup = 1
let g:NeoComplCache_EnableAtStartup = 1
let g:NeoComplCache_SmartCase = 1
let g:NeoComplCache_TagsAutoUpdate = 1
let g:NeoComplCache_EnableInfo = 1
let g:NeoComplCache_EnableCamelCaseCompletion = 1
let g:NeoComplCache_MinSyntaxLength = 3
let g:NeoComplCache_EnableSkipCompletion = 1
let g:NeoComplCache_SkipInputTime = '0.5'
let g:NeoComplCache_SnippetsDir = $VIMFILES.'/snippets'
" <TAB> completion.
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" snippets expand key
imap <silent> <C-e> <Plug>(neocomplcache_snippets_expand)
smap <silent> <C-e> <Plug>(neocomplcache_snippets_expand)
"-----------------------------------------------------------------
" plugin - matchit.vim 对%命令进行扩展使得能在嵌套标签和语句之间跳转
" % 正向匹配 g% 反向匹配
" [% 定位块首 ]% 定位块尾
"-----------------------------------------------------------------
"-----------------------------------------------------------------
" plugin - vcscommand.vim 对%命令进行扩展使得能在嵌套标签和语句之间跳转
" SVN/git 管理工具
"-----------------------------------------------------------------
"-----------------------------------------------------------------
" plugin – a.vim
"-----------------------------------------------------------------
* 百度网盘 
  第三方微博登录
  账号：17886230016 
  密码：wh958142
* VPN
Dear qiu duan,

PLEASE PRINT THIS MESSAGE FOR YOUR RECORDS - PLEASE READ THIS EMAIL IN FULL.

We are pleased to tell you that the server you ordered has now been set up and is operational.

Note: IF YOU ORDERED ANY PRODUCT ADDONS DURING YOUR ORDER, YOU MUST OPEN A SUPPORT TICKET FOR THE ADDONS TO BE ACTIVATED.

SERVICE DETAILS:

====================
VPS Login Details
====================

VPS Package: 1GB Linux VPS
Hostname: www.duanqiu0716.com
IP Address: 155.254.32.192

====================
VPS Control Panel
====================

Panel URL (https): https://vpscp.alpharacks.com:5656/
Username: vmuser28554
Password: df3ca6844f

====================
SSH Access Information
====================

Main IP: 155.254.32.192
Username: root
Password: df3ca6844f
Listen Port: 22

You can access your server using a free simple SSH client program called Putty located at: http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe

Support
=============================
For any support needs, please open

